package org.xmodel.external.sql;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Map;

/**
 * A fully-delegating implementation of the Connection interface which adds support for pooling.
 */
public class PooledConnection implements Connection
{
  public PooledConnection( ConnectionPool pool, Connection delegate)
  {
    this.pool = pool;
    this.delegate = delegate;
  }
  
  /* (non-Javadoc)
   * @see java.sql.Connection#clearWarnings()
   */
  public void clearWarnings() throws SQLException
  {
    delegate.clearWarnings();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#close()
   */
  public void close() throws SQLException
  {
    pool.release( this);
    delegate.close();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#commit()
   */
  public void commit() throws SQLException
  {
    delegate.commit();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#createStatement()
   */
  public Statement createStatement() throws SQLException
  {
    return delegate.createStatement();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#createStatement(int, int)
   */
  public Statement createStatement( int resultSetType, int resultSetConcurrency) throws SQLException
  {
    return delegate.createStatement( resultSetType, resultSetConcurrency);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#createStatement(int, int, int)
   */
  public Statement createStatement( int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
  {
    return createStatement( resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#getAutoCommit()
   */
  public boolean getAutoCommit() throws SQLException
  {
    return delegate.getAutoCommit();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#getCatalog()
   */
  public String getCatalog() throws SQLException
  {
    return delegate.getCatalog();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#getHoldability()
   */
  public int getHoldability() throws SQLException
  {
    return delegate.getHoldability();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#getMetaData()
   */
  public DatabaseMetaData getMetaData() throws SQLException
  {
    return delegate.getMetaData();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#getTransactionIsolation()
   */
  public int getTransactionIsolation() throws SQLException
  {
    return delegate.getTransactionIsolation();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#getTypeMap()
   */
  public Map<String, Class<?>> getTypeMap() throws SQLException
  {
    return delegate.getTypeMap();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#getWarnings()
   */
  public SQLWarning getWarnings() throws SQLException
  {
    return delegate.getWarnings();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#isClosed()
   */
  public boolean isClosed() throws SQLException
  {
    return delegate.isClosed();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#isReadOnly()
   */
  public boolean isReadOnly() throws SQLException
  {
    return delegate.isReadOnly();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#nativeSQL(java.lang.String)
   */
  public String nativeSQL( String sql) throws SQLException
  {
    return delegate.nativeSQL( sql);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareCall(java.lang.String)
   */
  public CallableStatement prepareCall( String sql) throws SQLException
  {
    return delegate.prepareCall( sql);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareCall(java.lang.String, int, int)
   */
  public CallableStatement prepareCall( String sql, int resultSetType, int resultSetConcurrency) throws SQLException
  {
    return delegate.prepareCall( sql, resultSetType, resultSetConcurrency);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareCall(java.lang.String, int, int, int)
   */
  public CallableStatement prepareCall( String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
  {
    return delegate.prepareCall( sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareStatement(java.lang.String)
   */
  public PreparedStatement prepareStatement( String sql) throws SQLException
  {
    return delegate.prepareStatement( sql);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareStatement(java.lang.String, int)
   */
  public PreparedStatement prepareStatement( String sql, int autoGeneratedKeys) throws SQLException
  {
    return delegate.prepareStatement( sql, autoGeneratedKeys);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareStatement(java.lang.String, int[])
   */
  public PreparedStatement prepareStatement( String sql, int[] columnIndexes) throws SQLException
  {
    return delegate.prepareStatement( sql, columnIndexes);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareStatement(java.lang.String, java.lang.String[])
   */
  public PreparedStatement prepareStatement( String sql, String[] columnNames) throws SQLException
  {
    return delegate.prepareStatement( sql, columnNames);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareStatement(java.lang.String, int, int)
   */
  public PreparedStatement prepareStatement( String sql, int resultSetType, int resultSetConcurrency) throws SQLException
  {
    return delegate.prepareStatement( sql, resultSetType, resultSetConcurrency);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#prepareStatement(java.lang.String, int, int, int)
   */
  public PreparedStatement prepareStatement( String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
  {
    return delegate.prepareStatement( sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#releaseSavepoint(java.sql.Savepoint)
   */
  public void releaseSavepoint( Savepoint savepoint) throws SQLException
  {
    delegate.releaseSavepoint( savepoint);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#rollback()
   */
  public void rollback() throws SQLException
  {
    delegate.rollback();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#rollback(java.sql.Savepoint)
   */
  public void rollback( Savepoint savepoint) throws SQLException
  {
    delegate.rollback( savepoint);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#setAutoCommit(boolean)
   */
  public void setAutoCommit( boolean autoCommit) throws SQLException
  {
    delegate.setAutoCommit( autoCommit);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#setCatalog(java.lang.String)
   */
  public void setCatalog( String catalog) throws SQLException
  {
    delegate.setCatalog( catalog);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#setHoldability(int)
   */
  public void setHoldability( int holdability) throws SQLException
  {
    delegate.setHoldability( holdability);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#setReadOnly(boolean)
   */
  public void setReadOnly( boolean readOnly) throws SQLException
  {
    delegate.setReadOnly( readOnly);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#setSavepoint()
   */
  public Savepoint setSavepoint() throws SQLException
  {
    return delegate.setSavepoint();
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#setSavepoint(java.lang.String)
   */
  public Savepoint setSavepoint( String name) throws SQLException
  {
    return delegate.setSavepoint( name);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#setTransactionIsolation(int)
   */
  public void setTransactionIsolation( int level) throws SQLException
  {
    delegate.setTransactionIsolation( level);
  }

  /* (non-Javadoc)
   * @see java.sql.Connection#setTypeMap(java.util.Map)
   */
  public void setTypeMap( Map<String, Class<?>> map) throws SQLException
  {
    delegate.setTypeMap( map);
  }

  private ConnectionPool pool;
  private Connection delegate;
}
