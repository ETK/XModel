package org.xmodel.xpath.function.custom;

import java.util.concurrent.atomic.AtomicLong;

import org.xmodel.xpath.expression.ExpressionException;
import org.xmodel.xpath.expression.IContext;
import org.xmodel.xpath.function.Function;

/**
 * A replacement for the use of automatically generated identifiers for SQL primary key column.  Generating
 * identifiers in the code allows the code to know the identifier before it is inserted into the database.  The
 * identifiers generated by this function are guaranteed to increase monotonically with each call, and will be
 * globally unique provided the function is not called continuously with a period of 100 microseconds.
 */
public class MonotonicCounterFunction extends Function
{
  public final static String name = "monotonic-counter";

  /* (non-Javadoc)
   * @see org.xmodel.xpath.expression.IExpression#getName()
   */
  @Override
  public String getName()
  {
    return name;
  }

  /* (non-Javadoc)
   * @see org.xmodel.xpath.expression.IExpression#getType()
   */
  @Override
  public ResultType getType()
  {
    return ResultType.NUMBER;
  }

  /* (non-Javadoc)
   * @see org.xmodel.xpath.expression.Expression#evaluateNumber(org.xmodel.xpath.expression.IContext)
   */
  @Override
  public double evaluateNumber( IContext context) throws ExpressionException
  {
    return (double)counter.incrementAndGet();
  }
  
  /* (non-Javadoc)
   * @see org.xmodel.xpath.expression.Expression#bind(org.xmodel.xpath.expression.IContext)
   */
  @Override
  public void bind( IContext context)
  {
    throw new UnsupportedOperationException();
  }

  /* (non-Javadoc)
   * @see org.xmodel.xpath.expression.Expression#unbind(org.xmodel.xpath.expression.IContext)
   */
  @Override
  public void unbind( IContext context)
  {
    throw new UnsupportedOperationException();
  }

  private static AtomicLong counter = new AtomicLong( (System.currentTimeMillis() - 1367959093000L) * 10);
}
